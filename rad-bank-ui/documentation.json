{
    "pipes": [],
    "interfaces": [
        {
            "name": "AccountInterface",
            "id": "interface-AccountInterface-259579cd3e2c7e087bc037afd6b95a6a88f3fab79b5938830b16a07bdff81ddc7254ce41cc7b9f171ef2e283c8b27054d1d8f9c99205b08cba23d3622319a531",
            "file": "src/app/types/account.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AccountInterface {\n    id: string;\n    name: string;\n    balance: number;\n}",
            "properties": [
                {
                    "name": "balance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UserInterface",
            "id": "interface-UserInterface-42d572fa286d3f9bbb7cb325537781d1beccc0b723a8586350924c6634b26ed294dba325589fab4949cd16ae2476f6b25abb2059b3f1dc312853bcb6b2357413",
            "file": "src/app/types/user.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AccountInterface } from \"./account.interface\";\n\nexport interface UserInterface {\n    email: string;\n    firstName: string;\n    lastName: string;\n}",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UserStateInterface",
            "id": "interface-UserStateInterface-ea8cda12e4a3e281a7f419434dd6b950ac6bc15e39ab636ade0ec5cf22ef7ec884ec4a38b0de003ac051d593838858a35b9987cfd457d67963a37b16383e4d02",
            "file": "src/app/types/userState.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AccountInterface } from \"./account.interface\";\nimport { UserInterface } from \"./user.interface\";\n\nexport interface UserStateInterface {\n    isLoading: boolean;\n    loggedIn: boolean;\n    user?: UserInterface;\n    accounts?: AccountInterface[];\n    error: string | null;\n}",
            "properties": [
                {
                    "name": "accounts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountInterface[]",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "loggedIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserInterface",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-95c8119269a49a13e8932be92e64feb817303c3e3cdb242d5f84990889cbb2e40bd7017f80267b05f0a219e3257af8e1a0044d9dd008c3da21d21550dbf9f5f0",
            "file": "src/app/services/auth.guard.ts",
            "properties": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable, take } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard {\n  constructor(public authService: AuthService, public router: Router) {}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    return this.authService.isLoggedIn$.pipe(take(1));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-c079493796cd54afedf599e5371b0d0016f03f37dbab3d73d71805e63a12bef10e2e682fd4443f58794322af779aaa151ce1bf1bdee61db04850e0e42966a60b",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "isLoggedIn$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "newUser",
                            "type": "UserInterface",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newUser",
                            "type": "UserInterface",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { signIn, signOut, signUp } from '../store/user.actions';\nimport { loggedInSelector } from '../store/selectors';\nimport { UserInterface } from '../types/user.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  isLoggedIn$: Observable<boolean>;\n  constructor(private _store: Store) {\n    this.isLoggedIn$ = this._store.pipe(select(loggedInSelector));\n  }\n\n  signOut() {\n    this._store.dispatch(signOut());\n  }\n\n  signUp(newUser: UserInterface) {\n    this._store.dispatch(signUp({ user: newUser }));\n  }\n\n  signIn(email: string) {\n    this._store.dispatch(signIn({ email: email }));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MockAPIServiceService",
            "id": "injectable-MockAPIServiceService-36bd889b48483f8bd3bb42e80c8a529b2c3850338d839a893bd1d3bbf442f6abb7f2d7adb0e5520779d440d72841e13fa4947f443bb1dffe4b716c7ba32a6d04",
            "file": "src/app/services/mock-apiservice.service.ts",
            "properties": [
                {
                    "name": "accounts",
                    "defaultValue": "new Map<string, AccountInterface[] | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "users",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserInterface[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "createAccount",
                    "args": [
                        {
                            "name": "newAccount",
                            "type": "AccountInterface",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newAccount",
                            "type": "AccountInterface",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUser",
                    "args": [
                        {
                            "name": "newUser",
                            "type": "UserInterface",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserInterface>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newUser",
                            "type": "UserInterface",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteAccount",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deposit",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAccounts",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AccountInterface[]>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUser",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserInterface>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "withdraw",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of, delay, throwError } from 'rxjs';\nimport { AccountInterface } from '../types/account.interface';\nimport { UserInterface } from '../types/user.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MockAPIServiceService {\n  users: UserInterface[] = [];\n  accounts = new Map<string, AccountInterface[] | undefined>();\n  constructor() {}\n\n  getUser(email: string): Observable<UserInterface> {\n    let user = this.users.find((user) => user.email === email);\n    if (user) {\n      return of(user).pipe(delay(2000));\n    } else {\n      return throwError(() => {\n        const error: any = new Error(`User does not exist!`);\n        error.timestamp = Date.now();\n        return error;\n      });\n    }\n  }\n\n  createUser(newUser: UserInterface): Observable<UserInterface> {\n    this.users.push(newUser);\n    this.accounts.set(newUser.email, []);\n    return of(newUser).pipe(delay(2000));\n  }\n\n  getAccounts(email: string): Observable<AccountInterface[]> {\n    if (this.accounts.has(email)) {\n      let accounts = this.accounts.get(email);\n      if (accounts) return of(accounts).pipe(delay(2000));\n\n      return throwError(() => {\n        const error: any = new Error(`Accounts don't exist`);\n        error.timestamp = Date.now();\n        return error;\n      });\n    } else {\n      return throwError(() => {\n        const error: any = new Error(`Accounts don't exist`);\n        error.timestamp = Date.now();\n        return error;\n      });\n    }\n  }\n\n  createAccount(newAccount: AccountInterface, email: string) {\n    if (this.accounts.has(email)) {\n      let accounts = this.accounts.get(email);\n      let acc: AccountInterface = {\n        id: '00000' + (accounts!.length + 1),\n        name: newAccount.name,\n        balance: newAccount.balance,\n      };\n      accounts = [...accounts!, acc];\n      this.accounts.set(email, accounts);\n\n      if (accounts) return of(accounts).pipe(delay(2000));\n\n      return throwError(() => {\n        const error: any = new Error(`Account does not exist`);\n        error.timestamp = Date.now();\n        return error;\n      });\n    } else {\n      return throwError(() => {\n        const error: any = new Error(`Account does not exist`);\n        error.timestamp = Date.now();\n        return error;\n      });\n    }\n  }\n\n  deleteAccount(accountId: string, email: string) {\n    this.accounts.set(\n      email,\n      this.accounts.get(email)!.filter((account) => account.id !== accountId)\n    );\n\n    let accounts = this.accounts.get(email);\n\n    if (accounts) return of(accounts).pipe(delay(2000));\n\n    return throwError(() => {\n      const error: any = new Error(`Accounts do not exist!`);\n      error.timestamp = Date.now();\n      return error;\n    });\n  }\n\n  withdraw(accountId: string, email: string, amount: number) {\n    if (this.accounts.has(email)) {\n      let accounts = this.accounts.get(email);\n      let account = accounts!.find((account) => account.id === accountId);\n      let balance = account!.balance;\n      if (amount / balance! > 0.9) {\n        return throwError(() => {\n          const error: any = new Error(\n            `You cannot take out more than 90% of your balance at once, please divide your withdrawls into seperate transactions`\n          );\n          error.timestamp = Date.now();\n          return error;\n        });\n      }\n      let newBalance = +balance! - +amount;\n      if (newBalance < 100) {\n        return throwError(() => {\n          const error: any = new Error(\n            `Your balance cannot be lower than $100`\n          );\n          error.timestamp = Date.now();\n          return error;\n        });\n      } else {\n        let updatedAccount: AccountInterface = {\n          id: account!.id,\n          name: account!.name,\n          balance: newBalance,\n        };\n        accounts = [\n          ...accounts!.filter((account) => account.id !== accountId),\n          updatedAccount,\n        ];\n\n        this.accounts.set(email, accounts);\n\n        if (accounts) return of(accounts).pipe(delay(2000));\n\n        return throwError(() => {\n          const error: any = new Error(`Accounts do not exist!`);\n          error.timestamp = Date.now();\n          return error;\n        });\n      }\n    } else {\n      return throwError(() => {\n        const error: any = new Error(`Accounts do not exist!`);\n        error.timestamp = Date.now();\n        return error;\n      });\n    }\n  }\n\n  deposit(accountId: string, email: string, amount: number) {\n    if (this.accounts.has(email)) {\n      let accounts = this.accounts.get(email);\n      let account = accounts!.find((acc) => acc.id === accountId);\n      if (account) {\n        if (amount > 10000) {\n          return throwError(() => {\n            const error: any = new Error(\n              `You cannot deposit more than $10,000 in a single transaction`\n            );\n            error.timestamp = Date.now();\n            return error;\n          });\n        } else {\n          let newBalance = +account.balance + +amount;\n          let updatedAccount: AccountInterface = {\n            id: account.id,\n            name: account.name,\n            balance: newBalance,\n          };\n          accounts = [\n            ...accounts!.filter((account) => account.id !== accountId),\n            updatedAccount,\n          ];\n\n          this.accounts.set(email, accounts);\n          if (accounts) return of(accounts).pipe(delay(2000));\n\n          return throwError(() => {\n            const error: any = new Error(`Account does not exist`);\n            error.timestamp = Date.now();\n            return error;\n          });\n        }\n      } else {\n        return throwError(() => {\n          const error: any = new Error(`Account does not exist!`);\n          error.timestamp = Date.now();\n          return error;\n        });\n      }\n    } else {\n      return throwError(() => {\n        const error: any = new Error(`Accounts do not exist!`);\n        error.timestamp = Date.now();\n        return error;\n      });\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        },
        {
            "name": "UserEffects",
            "id": "injectable-UserEffects-28ab0b35d5a26b2b288864b30b0fca3490032931e2e59e6a811e0c2a38c83163ab730c47ff149ba9ee87e44ad5e9b51c59a2b8e574abe01a573e3c6a4a54a6c9",
            "file": "src/app/store/effects.ts",
            "properties": [
                {
                    "name": "accountDeposit$",
                    "defaultValue": "createEffect(() =>\n  this.actions$.pipe(\n    ofType(AccountActions.accountDeposit),\n    mergeMap(({ accountID, ammount, email }) => {\n      return this._userService.deposit(accountID, email, ammount).pipe(\n        map((accounts) =>\n          AccountActions.accountDepositSuccess({ accounts })\n        ),\n        catchError((error) =>\n          of(AccountActions.accountDepositFailure({ error: error.message }))\n        )\n      );\n    })\n  )\n)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "accountWithdraw$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(AccountActions.accountWithdraw),\n      mergeMap(({ accountID, ammount, email }) => {\n        return this._userService.withdraw(accountID, email, ammount).pipe(\n          map((accounts) =>\n            AccountActions.accountWithdrawSuccess({ accounts })\n          ),\n          catchError((error) =>\n            of(AccountActions.accountWithdrawFailure({ error: error.message }))\n          )\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "createAccount$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(AccountActions.createAccount),\n      mergeMap(({ account, email }) => {\n        return this._userService.createAccount(account, email).pipe(\n          map((accounts) => AccountActions.createAccountSuccess({ accounts })),\n          catchError((error) =>\n            of(AccountActions.createAccountFailure({ error: error.message }))\n          )\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "deleteAccount$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(AccountActions.deleteAccount),\n      mergeMap(({ accountID, email }) => {\n        return this._userService.deleteAccount(accountID, email).pipe(\n          map((accounts) => AccountActions.deleteAccountSuccess({ accounts })),\n          catchError((error) =>\n            of(AccountActions.deleteAccountFailure({ error: error.message }))\n          )\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "getAccounts$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(AccountActions.getAccounts),\n      mergeMap(({ email }) => {\n        return this._userService.getAccounts(email).pipe(\n          map((accounts) => AccountActions.getAccountsSuccess({ accounts })),\n          catchError((error) =>\n            of(AccountActions.getAccountsFailure({ error: error.message }))\n          )\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "signIn$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(UserActions.signIn),\n      mergeMap(({ email }) => {\n        return this._userService.getUser(email).pipe(\n          map((user) => UserActions.signInSuccess({ user })),\n          catchError((error) =>\n            of(UserActions.signInFailure({ error: error.message }))\n          )\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "signInSuccess$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(UserActions.signInSuccess),\n      mergeMap(async ({ user }) =>\n        AccountActions.getAccounts({ email: user.email })\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "signUp$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(UserActions.signUp),\n      mergeMap(({ user }) => {\n        return this._userService.createUser(user).pipe(\n          map((user) => UserActions.signUpSuccess({ user })),\n          catchError((error) =>\n            of(UserActions.signUpFailure({ error: error.message }))\n          )\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "signUpSuccess$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(UserActions.signUpSuccess),\n      mergeMap(async ({ user }) =>\n        AccountActions.getAccounts({ email: user.email })\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, mergeMap, of } from 'rxjs';\nimport { MockAPIServiceService } from '../services/mock-apiservice.service';\nimport * as UserActions from './user.actions';\nimport * as AccountActions from './account.actions';\n\n@Injectable()\nexport class UserEffects {\n  signUp$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(UserActions.signUp),\n      mergeMap(({ user }) => {\n        return this._userService.createUser(user).pipe(\n          map((user) => UserActions.signUpSuccess({ user })),\n          catchError((error) =>\n            of(UserActions.signUpFailure({ error: error.message }))\n          )\n        );\n      })\n    )\n  );\n\n  signUpSuccess$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(UserActions.signUpSuccess),\n      mergeMap(async ({ user }) =>\n        AccountActions.getAccounts({ email: user.email })\n      )\n    )\n  );\n\n  signInSuccess$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(UserActions.signInSuccess),\n      mergeMap(async ({ user }) =>\n        AccountActions.getAccounts({ email: user.email })\n      )\n    )\n  );\n\n  signIn$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(UserActions.signIn),\n      mergeMap(({ email }) => {\n        return this._userService.getUser(email).pipe(\n          map((user) => UserActions.signInSuccess({ user })),\n          catchError((error) =>\n            of(UserActions.signInFailure({ error: error.message }))\n          )\n        );\n      })\n    )\n  );\n\n  getAccounts$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AccountActions.getAccounts),\n      mergeMap(({ email }) => {\n        return this._userService.getAccounts(email).pipe(\n          map((accounts) => AccountActions.getAccountsSuccess({ accounts })),\n          catchError((error) =>\n            of(AccountActions.getAccountsFailure({ error: error.message }))\n          )\n        );\n      })\n    )\n  );\n\n  createAccount$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AccountActions.createAccount),\n      mergeMap(({ account, email }) => {\n        return this._userService.createAccount(account, email).pipe(\n          map((accounts) => AccountActions.createAccountSuccess({ accounts })),\n          catchError((error) =>\n            of(AccountActions.createAccountFailure({ error: error.message }))\n          )\n        );\n      })\n    )\n  );\n\n  deleteAccount$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AccountActions.deleteAccount),\n      mergeMap(({ accountID, email }) => {\n        return this._userService.deleteAccount(accountID, email).pipe(\n          map((accounts) => AccountActions.deleteAccountSuccess({ accounts })),\n          catchError((error) =>\n            of(AccountActions.deleteAccountFailure({ error: error.message }))\n          )\n        );\n      })\n    )\n  );\n\n  accountWithdraw$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AccountActions.accountWithdraw),\n      mergeMap(({ accountID, ammount, email }) => {\n        return this._userService.withdraw(accountID, email, ammount).pipe(\n          map((accounts) =>\n            AccountActions.accountWithdrawSuccess({ accounts })\n          ),\n          catchError((error) =>\n            of(AccountActions.accountWithdrawFailure({ error: error.message }))\n          )\n        );\n      })\n    )\n  );\n\n  accountDeposit$ = createEffect(() =>\n  this.actions$.pipe(\n    ofType(AccountActions.accountDeposit),\n    mergeMap(({ accountID, ammount, email }) => {\n      return this._userService.deposit(accountID, email, ammount).pipe(\n        map((accounts) =>\n          AccountActions.accountDepositSuccess({ accounts })\n        ),\n        catchError((error) =>\n          of(AccountActions.accountDepositFailure({ error: error.message }))\n        )\n      );\n    })\n  )\n);\n\n  constructor(\n    private actions$: Actions,\n    private _userService: MockAPIServiceService\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_userService",
                        "type": "MockAPIServiceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 128,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_userService",
                        "type": "MockAPIServiceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AccountsListComponent",
            "id": "component-AccountsListComponent-759db42ab1dd00adc40466f06ebe32c3c3642fe5ea229a432bf4151c918f3136f1a17ea895169b98b5f839e8ef012b82f479ebb4e36a5f3cc91efb0d866cfef1",
            "file": "src/app/common-components/accounts/accounts-list/accounts-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-accounts-list",
            "styleUrls": [
                "./accounts-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accounts-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accounts$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<AccountInterface[]>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['id', 'name', 'balance', 'actions']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "createAccountDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDeleteDialog",
                    "args": [
                        {
                            "name": "account",
                            "type": "AccountInterface",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "AccountInterface",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDepositDialog",
                    "args": [
                        {
                            "name": "account",
                            "type": "AccountInterface",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "AccountInterface",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openWithdrawDialog",
                    "args": [
                        {
                            "name": "account",
                            "type": "AccountInterface",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "AccountInterface",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { accountsSelector } from 'src/app/store/selectors';\nimport { AccountInterface } from 'src/app/types/account.interface';\nimport { ConfirmDeleteDialogComponent } from '../confirm-delete-dialog/confirm-delete-dialog.component';\nimport { CreateAccountDialogComponent } from '../create-account-dialog/create-account-dialog.component';\nimport { DepositDialogComponent } from '../deposit-dialog/deposit-dialog.component';\nimport { WithdrawDialogComponent } from '../withdraw-dialog/withdraw-dialog.component';\n\n@Component({\n  selector: 'app-accounts-list',\n  templateUrl: './accounts-list.component.html',\n  styleUrls: ['./accounts-list.component.scss'],\n})\nexport class AccountsListComponent {\n  accounts$: Observable<AccountInterface[]>;\n  displayedColumns: string[] = ['id', 'name', 'balance', 'actions'];\n\n  constructor(public dialog: MatDialog, private _store: Store) {\n    this.accounts$ = this._store.pipe(select(accountsSelector));\n  }\n\n  openDeleteDialog(account: AccountInterface) {\n    const dialogRef = this.dialog.open(ConfirmDeleteDialogComponent, {\n      data: account,\n    });\n  }\n  openWithdrawDialog(account: AccountInterface) {\n    const dialogRef = this.dialog.open(WithdrawDialogComponent, {\n      data: account,\n    });\n  }\n  openDepositDialog(account: AccountInterface) {\n    const dialogRef = this.dialog.open(DepositDialogComponent, {\n      data: account,\n    });\n  }\n  createAccountDialog() {\n    const dialogRef = this.dialog.open(CreateAccountDialogComponent);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "table {\n  width: 100%;\n}\n.actions {\n    button {\n        margin: 5px;\n    }\n}\n.large-button {\n  margin-top: 10px;\n  padding: 20px;\n  width: 100%;\n}",
                    "styleUrl": "./accounts-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-table [dataSource]=\"accounts$\" class=\"mat-elevation-z8\">\n  <ng-container matColumnDef=\"id\">\n    <mat-header-cell *matHeaderCellDef> Account # </mat-header-cell>\n    <mat-cell *matCellDef=\"let account\"> {{ account.id }} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"name\">\n    <mat-header-cell *matHeaderCellDef> Account Name </mat-header-cell>\n    <mat-cell *matCellDef=\"let account\"> {{ account.name }} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"balance\">\n    <mat-header-cell *matHeaderCellDef> Balance </mat-header-cell>\n    <mat-cell *matCellDef=\"let account\"> {{ account.balance }} </mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"actions\">\n    <mat-header-cell *matHeaderCellDef> </mat-header-cell>\n    <mat-cell *matCellDef=\"let account\">\n      <div class=\"actions\">\n        <button\n          mat-stroked-button\n          (click)=\"openDepositDialog(account)\"\n          color=\"primary\"\n        >\n          Deposit\n        </button>\n        <button\n          mat-stroked-button\n          (click)=\"openWithdrawDialog(account)\"\n          color=\"primary\"\n        >\n          Withdraw\n        </button>\n        <button\n          mat-flat-button\n          (click)=\"openDeleteDialog(account)\"\n          color=\"warn\"\n        >\n          Close\n        </button>\n      </div>\n    </mat-cell>\n  </ng-container>\n\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n  <mat-row *matRowDef=\"let row; columns: displayedColumns\"></mat-row>\n</mat-table>\n<button class=\"large-button\" mat-raised-button color=\"primary\" (click)=\"createAccountDialog()\">\n  Create New Account\n</button>"
        },
        {
            "name": "AccountsPageComponent",
            "id": "component-AccountsPageComponent-1e059ef9bf01bb1e0cfd54a065015a7b4e03b411ce9ba615da87e3b1119fc43aca84eb0c049a353c8f41240c88b3b8fc164404d04996d6f7b369b63d66769fa6",
            "file": "src/app/pages/accounts-page/accounts-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-accounts-page",
            "styleUrls": [
                "./accounts-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accounts-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-accounts-page',\n  templateUrl: './accounts-page.component.html',\n  styleUrls: ['./accounts-page.component.scss']\n})\nexport class AccountsPageComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./accounts-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-accounts-list></app-accounts-list>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-a7556f26e98fc31c6c4f80c5c67b7b255fd8c9901f0e81b10ecc3398689e7e35c2eff5b0855a2bf945fe880051c5b909ce3134ffcffbfdbc875fa5e3d42cfc38",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'rad-bank-ui'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'rad-bank-ui';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-header></app-header>\n<router-outlet></router-outlet>\n<!-- <app-landing-page></app-landing-page> -->"
        },
        {
            "name": "ConfirmDeleteDialogComponent",
            "id": "component-ConfirmDeleteDialogComponent-54570bb961378dd55ecaae173a40be8cba540378ea44e8e421d1a6d2a9a16b63be85f56d07426a0cc9b8342b151ce5c114fbf8acb218365e54aab4389ac79a04",
            "file": "src/app/common-components/accounts/confirm-delete-dialog/confirm-delete-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirm-delete-dialog",
            "styleUrls": [
                "./confirm-delete-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-delete-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountInterface",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UserInterface>",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { Store, select } from '@ngrx/store';\nimport { map, Observable, take } from 'rxjs';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { deleteAccount } from 'src/app/store/account.actions';\nimport {\n  isLoadingSelector,\n  errorSelector,\n  userSelector,\n} from 'src/app/store/selectors';\nimport { AccountInterface } from 'src/app/types/account.interface';\nimport { UserInterface } from 'src/app/types/user.interface';\n\n@Component({\n  selector: 'app-confirm-delete-dialog',\n  templateUrl: './confirm-delete-dialog.component.html',\n  styleUrls: ['./confirm-delete-dialog.component.scss'],\n})\nexport class ConfirmDeleteDialogComponent {\n  isLoading$: Observable<boolean>;\n  error$: Observable<string>;\n  user$: Observable<UserInterface>;\n\n  constructor(\n    private _store: Store,\n    @Inject(MAT_DIALOG_DATA) public data: AccountInterface\n  ) {\n    this.isLoading$ = this._store.pipe(select(isLoadingSelector));\n    this.error$ = this._store.pipe(select(errorSelector));\n    this.user$ = this._store.pipe(select(userSelector));\n  }\n\n  deleteAccount() {\n    this.user$.pipe(take(1)).subscribe((user) => {\n      return this._store.dispatch(\n        deleteAccount({ accountID: this.data.id, email: user.email })\n      );\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./confirm-delete-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "AccountInterface",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "AccountInterface",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>Are you sure you want to delete this account?</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <p>Are you sure you want to delete this account? We will mail you your balance, this is a permenant removal of this account.</p>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-flat-button color=\"warn\" (click)=\"deleteAccount()\" [mat-dialog-close]=\"true\" cdkFocusInitial>Delete</button>\n</mat-dialog-actions>"
        },
        {
            "name": "CreateAccountDialogComponent",
            "id": "component-CreateAccountDialogComponent-664a93ca06e3695c66384025cda96fe33109f3d78d6cb5a5f2f61a061aa6f2bd522b8907b9901993a4394510788b92c5c723cd393c00797b11627caab7d1bf3b",
            "file": "src/app/common-components/accounts/create-account-dialog/create-account-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-account-dialog",
            "styleUrls": [
                "./create-account-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-account-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "name",
                    "defaultValue": "new FormControl('', [Validators.required])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UserInterface>",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "createAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "fc",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"You must enter a value\" | \"\"",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fc",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { Store, select } from '@ngrx/store';\nimport { map, Observable, take } from 'rxjs';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { createAccount } from 'src/app/store/account.actions';\nimport {\n  isLoadingSelector,\n  errorSelector,\n  userSelector,\n} from 'src/app/store/selectors';\nimport { AccountInterface } from 'src/app/types/account.interface';\nimport { UserInterface } from 'src/app/types/user.interface';\n\n@Component({\n  selector: 'app-create-account-dialog',\n  templateUrl: './create-account-dialog.component.html',\n  styleUrls: ['./create-account-dialog.component.scss'],\n})\nexport class CreateAccountDialogComponent {\n  isLoading$: Observable<boolean>;\n  error$: Observable<string>;\n  user$: Observable<UserInterface>;\n  name = new FormControl('', [Validators.required]);\n  constructor(\n    private _store: Store,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.isLoading$ = this._store.pipe(select(isLoadingSelector));\n    this.error$ = this._store.pipe(select(errorSelector));\n    this.user$ = this._store.pipe(select(userSelector));\n  }\n\n  getErrorMessage(fc: FormControl) {\n    return fc.hasError('required') ? 'You must enter a value' : '';\n  }\n\n  createAccount() {\n    if (this.name.value) {\n      let newAccount: AccountInterface = {\n        id: 'NA',\n        name: this.name.value,\n        balance: 100,\n      };\n      this.user$.pipe(take(1)).subscribe((user) => {\n        return this._store.dispatch(\n          createAccount({ account: newAccount, email: user.email })\n        );\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./create-account-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>Please enter the name of the account</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <p>A $100 will automatically be added into your account on creation</p>\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Enter account name</mat-label>\n    <input matInput [formControl]=\"name\" required />\n    <mat-error *ngIf=\"name.invalid\">{{ getErrorMessage(name) }}</mat-error>\n  </mat-form-field>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button\n    mat-button\n    [disabled]=\"name.invalid\"\n    (click)=\"createAccount()\"\n    [mat-dialog-close]=\"true\"\n    cdkFocusInitial\n  >\n    Create\n  </button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "DepositDialogComponent",
            "id": "component-DepositDialogComponent-2f6fbff0f41406b10eebe442386b640e32c52f0d4c8e2c8a695fffce61eae5e8a507c6f2f72d5afd48b787c8a912c3fbb35879ebabaa988f7623c2a5d4a4201c",
            "file": "src/app/common-components/accounts/deposit-dialog/deposit-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-deposit-dialog",
            "styleUrls": [
                "./deposit-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./deposit-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "amount",
                    "defaultValue": "new FormControl(0, [Validators.required])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UserInterface>",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "deposit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "fc",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"You must enter a value\" | \"\"",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fc",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { Store, select } from '@ngrx/store';\nimport { map, Observable, take } from 'rxjs';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { accountDeposit } from 'src/app/store/account.actions';\nimport {\n  isLoadingSelector,\n  errorSelector,\n  userSelector,\n} from 'src/app/store/selectors';\nimport { UserInterface } from 'src/app/types/user.interface';\n\n@Component({\n  selector: 'app-deposit-dialog',\n  templateUrl: './deposit-dialog.component.html',\n  styleUrls: ['./deposit-dialog.component.scss'],\n})\nexport class DepositDialogComponent {\n  isLoading$: Observable<boolean>;\n  error$: Observable<string>;\n  user$: Observable<UserInterface>;\n  amount = new FormControl(0, [Validators.required]);\n  constructor(\n    private _router: Router,\n    private _auth: AuthService,\n    private _store: Store,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.isLoading$ = this._store.pipe(select(isLoadingSelector));\n    this.error$ = this._store.pipe(select(errorSelector));\n    this.user$ = this._store.pipe(select(userSelector));\n  }\n\n  deposit() {\n    if (this.amount.value) {\n      this.user$.pipe(take(1)).subscribe((user) => {\n        return this._store.dispatch(\n          accountDeposit({\n            accountID: this.data.id,\n            ammount: this.amount.value!,\n            email: user.email,\n          })\n        );\n      });\n    }\n  }\n\n  getErrorMessage(fc: FormControl) {\n    return fc.hasError('required') ? 'You must enter a value' : '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./deposit-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>Please enter amount to deposit into ACCOUNT NAME HERE</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Enter amount to deposit</mat-label>\n    <input matInput [formControl]=\"amount\" required />\n    <mat-error *ngIf=\"amount.invalid\">{{ getErrorMessage(amount) }}</mat-error>\n  </mat-form-field>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [disabled]=\"amount.invalid\" (click)=\"deposit()\" [mat-dialog-close]=\"true\" cdkFocusInitial>Deposit</button>\n</mat-dialog-actions>"
        },
        {
            "name": "DepositPageComponent",
            "id": "component-DepositPageComponent-8e1c03b6420a4abd154aec47cfecc481f6d9c3b98054bde54cfa59ee97a0866679a002fd9e0b70f9489df3aaea00829973011876dc84677160f439ba92f5af8f",
            "file": "src/app/pages/deposit-page/deposit-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-deposit-page",
            "styleUrls": [
                "./deposit-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./deposit-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-deposit-page',\n  templateUrl: './deposit-page.component.html',\n  styleUrls: ['./deposit-page.component.scss']\n})\nexport class DepositPageComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./deposit-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>deposit-page works!</p>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-08ea377478f41ca7cc69ec5cd07c5296dc3d6e2178c580e82ee406f934ab2e1af6ffc51e1da0aff313e5447c68114dbf0f3a016f30e4ffaea4f2e9ad68eccd8d",
            "file": "src/app/common-components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n})\nexport class HeaderComponent {\n  constructor(private _router: Router, private _auth: AuthService) {}\n\n  isAuthenticated(): Observable<boolean> {\n    return this._auth.isLoggedIn$;\n  }\n\n  signOut() {\n    this._auth.signOut();\n    this._router.navigate(['/']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".spacer {\n    flex: 1 1 auto;\n  }\n\nh2 {\n  margin: 0;\n}",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<header>\n  <mat-toolbar color=\"primary\">\n    <button mat-flat-button color=\"primary\" [routerLink]=\"['/']\">\n      <mat-icon>account_balance</mat-icon>\n      <h2>RadBank</h2>\n    </button>\n    <span class=\"spacer\"></span>\n    <button\n      mat-icon-button\n      [matMenuTriggerFor]=\"menu\"\n      class=\"example-icon\"\n      aria-label=\"Example icon-button with menu icon\"\n    >\n      <mat-icon>menu</mat-icon>\n    </button>\n    <mat-menu #menu=\"matMenu\">\n      <a *ngIf=\"isAuthenticated() | async\" [routerLink]=\"['/']\" mat-menu-item>Home</a>\n      <a *ngIf=\"isAuthenticated() | async\" [routerLink]=\"['/accounts']\" mat-menu-item>My Accounts</a>\n      <a *ngIf=\"isAuthenticated() | async\" (click)=\"signOut()\" mat-menu-item>Sign out</a>\n      <a *ngIf=\"!(isAuthenticated() | async)\" [routerLink]=\"['/sign-in']\" mat-menu-item>Sign in</a>\n    </mat-menu>\n  </mat-toolbar>\n</header>\n"
        },
        {
            "name": "HeroComponent",
            "id": "component-HeroComponent-691b5750c365992b965cbc5af5c91d0f7c9ff9dc381891d1d36fbed95fd2303a06f5ebce147b6242af73cf6977fd5c2ff62bef88f30045ee7512a4ad1d1a352d",
            "file": "src/app/common-components/hero/hero.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hero",
            "styleUrls": [
                "./hero.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./hero.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-hero',\n  templateUrl: './hero.component.html',\n  styleUrls: ['./hero.component.scss']\n})\nexport class HeroComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hero {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  background-image: url(\"https://images.pexels.com/photos/518244/pexels-photo-518244.jpeg\");\n  box-shadow: inset 0 0 0 1000px rgba(0, 0, 0, 0.4);\n  width: 100%;\n  height: 60vh;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  .hero-text {\n    color: white;\n    margin: 0;\n  }\n  button {\n    margin: 5px;\n  }\n}\n",
                    "styleUrl": "./hero.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"hero\">\n    <h1 class=\"hero-text\">The #1 fake bank this code test has ever recieved!</h1>\n    <h3 class=\"hero-text\">Sign up with us now.</h3>\n    <button [routerLink]=\"['/sign-up']\" mat-raised-button color=\"primary\">Sign up!</button>\n</div>"
        },
        {
            "name": "LandingPageComponent",
            "id": "component-LandingPageComponent-b7613055fc25779bda58b88c92112242c53245e92ae21e4a25217c7d1fa979f96d7d996ebd72625fae79359df505ead4120c2c4b7b0d00e00f40cafb960e8b4b",
            "file": "src/app/pages/landing-page/landing-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-landing-page",
            "styleUrls": [
                "./landing-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./landing-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { signIn } from 'src/app/store/user.actions';\nimport { isLoadingSelector } from 'src/app/store/selectors';\n\n@Component({\n  selector: 'app-landing-page',\n  templateUrl: './landing-page.component.html',\n  styleUrls: ['./landing-page.component.scss']\n})\nexport class LandingPageComponent implements OnInit {\n  isLoading$: Observable<boolean>;\n  constructor(private _store: Store) {\n    this.isLoading$ = this._store.pipe(select(isLoadingSelector))\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./landing-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n    <app-hero></app-hero>\n    <!-- This code below should be its own component as well but due to time constraints I will just put it here -->\n</div>"
        },
        {
            "name": "SignInFormComponent",
            "id": "component-SignInFormComponent-f48c3e7ff52b17dcfe00fb03299be32b40fa3bac661d99cf3a10a6b61986bee4429514cae6b0844022eaa9cc706ee1ea165f94f19adf11017e77e266cc31011d",
            "file": "src/app/common-components/sign-in-form/sign-in-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-in-form",
            "styleUrls": [
                "./sign-in-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-in-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "email",
                    "defaultValue": "new FormControl('', [Validators.required, Validators.email])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "fc",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"You must enter a value\" | \"Not a valid email\" | \"\"",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fc",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { map, Observable } from 'rxjs';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { errorSelector, isLoadingSelector } from 'src/app/store/selectors';\n\n@Component({\n  selector: 'app-sign-in-form',\n  templateUrl: './sign-in-form.component.html',\n  styleUrls: ['./sign-in-form.component.scss'],\n})\nexport class SignInFormComponent {\n  isLoading$: Observable<boolean>;\n  error$: Observable<string>;\n  email = new FormControl('', [Validators.required, Validators.email]);\n  constructor(private _router: Router, private _auth: AuthService, private _store: Store) {\n    this.isLoading$ = this._store.pipe(select(isLoadingSelector))\n    this.error$ = this._store.pipe(select(errorSelector))\n  }\n\n  signIn() {\n    if (!this.email.hasError('required') && !this.email.hasError('email')) {\n      this._auth.signIn(this.email.value!);\n      this._auth.isLoggedIn$.subscribe(isLoggedIn => {\n        if (isLoggedIn) {\n          this._router.navigate([''])\n        }\n      })\n    }\n  }\n\n  getErrorMessage(fc: FormControl) {\n    if (fc.hasError('required')) {\n      return 'You must enter a value';\n    }\n    return fc.hasError('email') ? 'Not a valid email' : '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-top: 50px;\n    width: 100%;\n    box-sizing: border-box;\n}\n\n.example-container mat-form-field + mat-form-field {\n    margin-left: 8px;\n  }\n  ",
                    "styleUrl": "./sign-in-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"example-container\">\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Enter your email</mat-label>\n    <input matInput [formControl]=\"email\" required />\n    <mat-error *ngIf=\"email.invalid\">{{ getErrorMessage(email) }}</mat-error>\n  </mat-form-field>\n  <button\n    mat-raised-button\n    *ngIf=\"!(isLoading$ | async)\"\n    (click)=\"signIn()\"\n    color=\"primary\"\n  >\n    Sign in\n  </button>\n  <mat-spinner *ngIf=\"isLoading$ | async\"></mat-spinner>\n  <div *ngIf=\"error$ | async as error\">\n    <p>{{ error }}</p>\n  </div>\n  <button mat-button [routerLink]=\"['/sign-up']\" color=\"primary\">\n    Don't have an account? Sign Up!\n  </button>\n</div>\n"
        },
        {
            "name": "SignInPageComponent",
            "id": "component-SignInPageComponent-49b2b986802a63b3f54fdf5f65e2babcb621af6e2549b001e720f7620e16d1c2f020e6c39ddca68b09fb717e3ff1c7466fb309571e28c4587b6f6e4df472afe6",
            "file": "src/app/pages/sign-in-page/sign-in-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-in-page",
            "styleUrls": [
                "./sign-in-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-in-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-sign-in-page',\n  templateUrl: './sign-in-page.component.html',\n  styleUrls: ['./sign-in-page.component.scss']\n})\nexport class SignInPageComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sign-in-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-sign-in-form></app-sign-in-form>"
        },
        {
            "name": "SignUpFormComponent",
            "id": "component-SignUpFormComponent-d0c30801652c1c17706c3e3dbf07da3349504140a25639cef7906b71a0a688e3bf56fe9e64021ee14294d77005ac5afd1cd05bb8406d4eb18d7547c06a4a93e8",
            "file": "src/app/common-components/sign-up-form/sign-up-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up-form",
            "styleUrls": [
                "./sign-up-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "email",
                    "defaultValue": "new FormControl('', [Validators.required, Validators.email])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "firstName",
                    "defaultValue": "new FormControl('', [Validators.required])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "lastName",
                    "defaultValue": "new FormControl('', [Validators.required])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "fc",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"You must enter a value\" | \"Not a valid email\" | \"\"",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fc",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { errorSelector, isLoadingSelector } from 'src/app/store/selectors';\nimport { UserInterface } from 'src/app/types/user.interface';\n\n@Component({\n  selector: 'app-sign-up-form',\n  templateUrl: './sign-up-form.component.html',\n  styleUrls: ['./sign-up-form.component.scss'],\n})\nexport class SignUpFormComponent {\n  isLoading$: Observable<boolean>;\n  error$: Observable<string>;\n  email = new FormControl('', [Validators.required, Validators.email]);\n  lastName = new FormControl('', [Validators.required]);\n  firstName = new FormControl('', [Validators.required]);\n  constructor(\n    private _router: Router,\n    private _auth: AuthService,\n    private _store: Store\n  ) {\n    this.isLoading$ = this._store.pipe(select(isLoadingSelector));\n    this.error$ = this._store.pipe(select(errorSelector))\n  }\n\n  signUp() {\n    let newUser: UserInterface = {\n      email: this.email.value!,\n      firstName: this.firstName.value!,\n      lastName: this.lastName.value!,\n    };\n\n    this._auth.signUp(newUser);\n\n    this._auth.isLoggedIn$.subscribe((isLoggedIn) => {\n      if (isLoggedIn) {\n        this._router.navigate(['']);\n      }\n    });\n  }\n\n  getErrorMessage(fc: FormControl) {\n    if (fc.hasError('required')) {\n      return 'You must enter a value';\n    }\n\n    return fc.hasError('email') ? 'Not a valid email' : '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-top: 50px;\n    width: 100%;\n    box-sizing: border-box;\n}\n\n.example-container mat-form-field + mat-form-field {\n    margin-left: 8px;\n  }\n  ",
                    "styleUrl": "./sign-up-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"example-container\">\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Enter your email</mat-label>\n    <input matInput [formControl]=\"email\" required />\n    <mat-error *ngIf=\"email.invalid\">{{ getErrorMessage(email) }}</mat-error>\n  </mat-form-field>\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Enter your first name</mat-label>\n    <input matInput [formControl]=\"firstName\" required />\n    <mat-error *ngIf=\"firstName.invalid\">{{\n      getErrorMessage(firstName)\n    }}</mat-error>\n  </mat-form-field>\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Enter your last name</mat-label>\n    <input matInput [formControl]=\"lastName\" required />\n    <mat-error *ngIf=\"lastName.invalid\">{{\n      getErrorMessage(lastName)\n    }}</mat-error>\n  </mat-form-field>\n  <button\n    *ngIf=\"!(isLoading$ | async)\"\n    mat-raised-button\n    (click)=\"signUp()\"\n    color=\"primary\"\n  >\n    Sign Up\n  </button>\n  <mat-spinner *ngIf=\"isLoading$ | async\"></mat-spinner>\n  <div *ngIf=\"error$ | async as error\">\n    <p>{{ error }}</p>\n  </div>\n  <button mat-button [routerLink]=\"['/sign-in']\" color=\"primary\">\n    Already have an account? Sign In!\n  </button>\n</div>\n"
        },
        {
            "name": "SignUpPageComponent",
            "id": "component-SignUpPageComponent-0522c2754726798f2f3102828b80395db53c3d06fdc08728ce65714e157064ca21893fd51f182434bfdc5815ae14d454dc1de6c1acecc609094cdfb83fac5674",
            "file": "src/app/pages/sign-up-page/sign-up-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up-page",
            "styleUrls": [
                "./sign-up-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-sign-up-page',\n  templateUrl: './sign-up-page.component.html',\n  styleUrls: ['./sign-up-page.component.scss']\n})\nexport class SignUpPageComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sign-up-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-sign-up-form></app-sign-up-form>"
        },
        {
            "name": "WithdrawDialogComponent",
            "id": "component-WithdrawDialogComponent-488ccd6f56db090385a86582d72cefbaaaa2fed76d084406df8e7117923ccf439e586b871b321604ea401eef7e4b0425ee79855f7b0477246d717742693d4075",
            "file": "src/app/common-components/accounts/withdraw-dialog/withdraw-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-withdraw-dialog",
            "styleUrls": [
                "./withdraw-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./withdraw-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "amount",
                    "defaultValue": "new FormControl(0, [Validators.required])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UserInterface>",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "fc",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"You must enter a value\" | \"\"",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fc",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "withdraw",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { Store, select } from '@ngrx/store';\nimport { map, Observable, take } from 'rxjs';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { accountWithdraw } from 'src/app/store/account.actions';\nimport {\n  isLoadingSelector,\n  errorSelector,\n  userSelector,\n} from 'src/app/store/selectors';\nimport { UserInterface } from 'src/app/types/user.interface';\n\n@Component({\n  selector: 'app-withdraw-dialog',\n  templateUrl: './withdraw-dialog.component.html',\n  styleUrls: ['./withdraw-dialog.component.scss'],\n})\nexport class WithdrawDialogComponent {\n  isLoading$: Observable<boolean>;\n  error$: Observable<string>;\n  user$: Observable<UserInterface>;\n  amount = new FormControl(0, [Validators.required]);\n  constructor(\n    private _router: Router,\n    private _auth: AuthService,\n    private _store: Store,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.isLoading$ = this._store.pipe(select(isLoadingSelector));\n    this.error$ = this._store.pipe(select(errorSelector));\n    this.user$ = this._store.pipe(select(userSelector));\n  }\n\n  withdraw() {\n    if (this.amount.value) {\n      this.user$.pipe(take(1)).subscribe((user) => {\n        return this._store.dispatch(\n          accountWithdraw({\n            accountID: this.data.id,\n            ammount: this.amount.value!,\n            email: user.email,\n          })\n        );\n      });\n    }\n  }\n\n  getErrorMessage(fc: FormControl) {\n    return fc.hasError('required') ? 'You must enter a value' : '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./withdraw-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>Please enter amount to withdraw from ACCOUNT NAME HERE</h2>\n<mat-dialog-content class=\"mat-typography\">\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Enter amount to withdraw</mat-label>\n    <input matInput [formControl]=\"amount\" required />\n    <mat-error *ngIf=\"amount.invalid\">{{ getErrorMessage(amount) }}</mat-error>\n  </mat-form-field>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button mat-button mat-dialog-close>Cancel</button>\n  <button mat-button [disabled]=\"amount.invalid\" (click)=\"withdraw()\" [mat-dialog-close]=\"true\" cdkFocusInitial>Withdraw</button>\n</mat-dialog-actions>"
        },
        {
            "name": "WithdrawPageComponent",
            "id": "component-WithdrawPageComponent-1d21d9b7e188e343a1cb1aee30fb1204213797c71bf907a556ded33b7b6186d2ffe3759af114c57222bf46c0d844f34bd1bf90b67f6a78d5ffb28c41bfaf611d",
            "file": "src/app/pages/withdraw-page/withdraw-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-withdraw-page",
            "styleUrls": [
                "./withdraw-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./withdraw-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-withdraw-page',\n  templateUrl: './withdraw-page.component.html',\n  styleUrls: ['./withdraw-page.component.scss']\n})\nexport class WithdrawPageComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./withdraw-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>withdraw-page works!</p>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-3ff8400c49ed062601b02edf465ab7850594669178691e440f2948d23e80d8418a1c6ef7f3fd788c6d362fec3b17837df4ba150f50e45a63515fc5192c91cb8d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, isDevMode } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { PagesModule } from './pages/pages.module';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { userReducer } from './store/user.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { UserEffects } from './store/effects';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    PagesModule,\n    StoreModule.forRoot({ user: userReducer }),\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: !isDevMode() }),\n    EffectsModule.forRoot([UserEffects]),\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "PagesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-b7e2e992ceb9e7492dee21c21ce9bf8670c216718fdcce5f5c8f4e6ff0f1c43382fc08aff52c4456302be7dd578b7d45b8d0fb734d45c7af3b70acb0feacb428",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { inject, NgModule, Type } from '@angular/core';\nimport { CanActivateFn, RouterModule, Routes } from '@angular/router';\nimport { AppComponent } from './app.component';\nimport { AccountsPageComponent } from './pages/accounts-page/accounts-page.component';\nimport { DepositPageComponent } from './pages/deposit-page/deposit-page.component';\nimport { LandingPageComponent } from './pages/landing-page/landing-page.component';\nimport { SignInPageComponent } from './pages/sign-in-page/sign-in-page.component';\nimport { SignUpPageComponent } from './pages/sign-up-page/sign-up-page.component';\nimport { WithdrawPageComponent } from './pages/withdraw-page/withdraw-page.component';\nimport { AuthGuard } from './services/auth.guard';\n\nfunction mapToCanActivate(providers: Array<Type<{canActivate: CanActivateFn}>>): CanActivateFn[] {\n  return providers.map(provider => (...params) => inject(provider).canActivate(...params));\n}\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LandingPageComponent,\n  },\n  {\n    path: 'sign-up',\n    component: SignUpPageComponent,\n    \n  },\n  {\n    path: 'sign-in',\n    component: SignInPageComponent\n  },\n  {\n    path: 'withdraw',\n    component: WithdrawPageComponent,\n    canActivate: \"mapToCanActivate([AuthGuard])\"\n  },\n  {\n    path: 'deposit',\n    component: DepositPageComponent,\n    canActivate: \"mapToCanActivate([AuthGuard])\"\n  },\n  {\n    path: 'accounts',\n    component: AccountsPageComponent,\n    canActivate: \"mapToCanActivate([AuthGuard])\"\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CommonComponentsModule",
            "id": "module-CommonComponentsModule-10e682f644ced68d95777085abb73b613269436adac221af56452efb825b8f1902a4e7b5916bc1732691e4b69254374945f3fefc6fb60758643fd4ae2bc2dac0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/common-components/common-components.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HeaderComponent } from './header/header.component';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { HeroComponent } from './hero/hero.component';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { RouterModule } from '@angular/router';\nimport { SignInFormComponent } from './sign-in-form/sign-in-form.component';\nimport { SignUpFormComponent } from './sign-up-form/sign-up-form.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { AccountsListComponent } from './accounts/accounts-list/accounts-list.component';\nimport { MatTableModule } from '@angular/material/table';\nimport { WithdrawDialogComponent } from './accounts/withdraw-dialog/withdraw-dialog.component';\nimport { DepositDialogComponent } from './accounts/deposit-dialog/deposit-dialog.component';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { ConfirmDeleteDialogComponent } from './accounts/confirm-delete-dialog/confirm-delete-dialog.component';\nimport { CreateAccountDialogComponent } from './accounts/create-account-dialog/create-account-dialog.component';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\n@NgModule({\n  declarations: [\n    HeaderComponent,\n    HeroComponent,\n    SignInFormComponent,\n    SignUpFormComponent,\n    AccountsListComponent,\n    WithdrawDialogComponent,\n    DepositDialogComponent,\n    ConfirmDeleteDialogComponent,\n    CreateAccountDialogComponent,\n  ],\n  imports: [\n    CommonModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatButtonModule,\n    MatMenuModule,\n    RouterModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    MatInputModule,\n    MatTableModule,\n    MatDialogModule,\n    MatProgressSpinnerModule,\n  ],\n  exports: [\n    HeroComponent,\n    HeaderComponent,\n    SignInFormComponent,\n    SignUpFormComponent,\n    AccountsListComponent,\n    WithdrawDialogComponent,\n    DepositDialogComponent,\n    MatToolbarModule,\n    MatIconModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    MatInputModule,\n  ],\n})\nexport class CommonComponentsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountsListComponent"
                        },
                        {
                            "name": "ConfirmDeleteDialogComponent"
                        },
                        {
                            "name": "CreateAccountDialogComponent"
                        },
                        {
                            "name": "DepositDialogComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HeroComponent"
                        },
                        {
                            "name": "SignInFormComponent"
                        },
                        {
                            "name": "SignUpFormComponent"
                        },
                        {
                            "name": "WithdrawDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccountsListComponent"
                        },
                        {
                            "name": "DepositDialogComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HeroComponent"
                        },
                        {
                            "name": "SignInFormComponent"
                        },
                        {
                            "name": "SignUpFormComponent"
                        },
                        {
                            "name": "WithdrawDialogComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PagesModule",
            "id": "module-PagesModule-3919d0a25b787184c80a9899f348796f2351023ecce9e7070800d92206c1756006f2edb8e6683b5ce0c7031188575fe3ca9635ce39eb3bdc84c31218a7ed7a28",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/pages.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LandingPageComponent } from './landing-page/landing-page.component';\nimport { CommonComponentsModule } from '../common-components/common-components.module';\nimport { SignUpPageComponent } from './sign-up-page/sign-up-page.component';\nimport { SignInPageComponent } from './sign-in-page/sign-in-page.component';\nimport { WithdrawPageComponent } from './withdraw-page/withdraw-page.component';\nimport { DepositPageComponent } from './deposit-page/deposit-page.component';\nimport { AccountsPageComponent } from './accounts-page/accounts-page.component';\n\n\n\n@NgModule({\n  declarations: [\n    LandingPageComponent,\n    SignUpPageComponent,\n    SignInPageComponent,\n    WithdrawPageComponent,\n    DepositPageComponent,\n    AccountsPageComponent\n  ],\n  imports: [\n    CommonModule,\n    CommonComponentsModule,\n  ],\n  exports: [\n    LandingPageComponent,\n    CommonComponentsModule\n  ]\n})\nexport class PagesModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountsPageComponent"
                        },
                        {
                            "name": "DepositPageComponent"
                        },
                        {
                            "name": "LandingPageComponent"
                        },
                        {
                            "name": "SignInPageComponent"
                        },
                        {
                            "name": "SignUpPageComponent"
                        },
                        {
                            "name": "WithdrawPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LandingPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ServicesModule",
            "id": "module-ServicesModule-9fea35844173a7d54941d4f67ea3800d0eeee425aee5b65ee2feb60397d0f8a51f9a29c0652e3e76108a75bf03acc7e77078b677de3cdf264550ae688f3c0d19",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/services/services.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class ServicesModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "accountDeposit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[User] Account Deposit', props<{accountID: string, ammount: number, email: string}>())"
            },
            {
                "name": "accountDepositFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('User] Account Deposit Failure', props<{error: string}>())"
            },
            {
                "name": "accountDepositSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('User] Account Deposit Success', props<{accounts: AccountInterface[]}>())"
            },
            {
                "name": "accountsSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectFeature,\n  (state) => state.accounts\n)"
            },
            {
                "name": "accountWithdraw",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[User] Account Withdraw', props<{accountID: string, ammount: number, email: string}>())"
            },
            {
                "name": "accountWithdrawFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('User] Account Withdraw Failure', props<{error: string}>())"
            },
            {
                "name": "accountWithdrawSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('User] Account Withdraw Success', props<{accounts: AccountInterface[]}>())"
            },
            {
                "name": "createAccount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[User] Create Account', props<{account: AccountInterface, email: string}>())"
            },
            {
                "name": "createAccountFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('User] Create Account Failure', props<{error: string}>())"
            },
            {
                "name": "createAccountSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('User] Create Account Success', props<{accounts: AccountInterface[]}>())"
            },
            {
                "name": "deleteAccount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[User] Delete Account', props<{accountID: string, email: string}>())"
            },
            {
                "name": "deleteAccountFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('User] Delete Account Failure', props<{error: string}>())"
            },
            {
                "name": "deleteAccountSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('User] Delete Account Success', props<{accounts: AccountInterface[]}>())"
            },
            {
                "name": "errorSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectFeature,\n  (state) => state.error\n)"
            },
            {
                "name": "getAccounts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[User] Get Accounts', props<{email: string}>())"
            },
            {
                "name": "getAccountsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('User] Get Accounts Failure', props<{error: string}>())"
            },
            {
                "name": "getAccountsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/account.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('User] Get Accounts Success', props<{accounts: AccountInterface[]}>())"
            },
            {
                "name": "Header",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Hero",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Hero.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "UserStateInterface",
                "defaultValue": "{\n  isLoading: false,\n  loggedIn: false,\n  user: undefined,\n  accounts: [],\n  error: null,\n}"
            },
            {
                "name": "isLoadingSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectFeature,\n  (state) => state.isLoading\n)"
            },
            {
                "name": "loggedInSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n    selectFeature,\n    (state) => state.loggedIn\n  )"
            },
            {
                "name": "selectFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(state: any) => state.user"
            },
            {
                "name": "signIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[User] Sign In', props<{email: string}>())"
            },
            {
                "name": "signInFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[User] Sign In Failure', props<{error: string}>())"
            },
            {
                "name": "signInSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[User] Sign In Success', props<{user: UserInterface}>())"
            },
            {
                "name": "signOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[User] Sign Out')"
            },
            {
                "name": "signUp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[User] Sign Up', props<{user: UserInterface}>())"
            },
            {
                "name": "signUpFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[User] Sign Up Failure', props<{error: string}>())"
            },
            {
                "name": "signUpSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[User] Sign Up Success', props<{user: UserInterface}>())"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Hero.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args,\n})"
            },
            {
                "name": "userReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(userActions.signIn, (state) => ({ ...state, isLoading: true })),\n  on(userActions.signInSuccess, (state, action) => ({\n    ...state,\n    isLoading: false,\n    user: action.user,\n    loggedIn: true,\n    error: null,\n  })),\n  on(userActions.signInFailure, (state, action) => ({\n    ...state,\n    isLoading: false,\n    error: action.error,\n    loggedIn: false,\n  })),\n  on(userActions.signUp, (state) => ({ ...state, isLoading: true })),\n  on(userActions.signUpSuccess, (state, action) => ({\n    ...state,\n    isLoading: false,\n    user: action.user,\n    loggedIn: true,\n    error: null,\n  })),\n  on(userActions.signUpFailure, (state, action) => ({\n    ...state,\n    isLoading: false,\n    error: action.error,\n    loggedIn: false,\n  })),\n  on(userActions.signOut, (state) => ({\n    ...state,\n    isLoading: false,\n    user: undefined,\n    accounts: undefined,\n    loggedIn: false,\n  })),\n  on(accountActions.accountDeposit, (state) => ({ ...state, isLoading: true })),\n  on(accountActions.accountDepositSuccess, (state, action) => ({\n    ...state,\n    isLoading: false,\n    accounts: action.accounts,\n    error: null,\n  })),\n  on(accountActions.accountDepositFailure, (state, action) => ({\n    ...state,\n    isLoading: false,\n    error: action.error,\n  })),\n  on(accountActions.accountWithdraw, (state) => ({\n    ...state,\n    isLoading: true,\n  })),\n  on(accountActions.accountWithdrawSuccess, (state, action) => ({\n    ...state,\n    isLoading: false,\n    accounts: action.accounts,\n    error: null,\n  })),\n  on(accountActions.accountWithdrawFailure, (state, action) => ({\n    ...state,\n    isLoading: false,\n    error: action.error,\n  })),\n  on(accountActions.createAccount, (state) => ({ ...state, isLoading: true })),\n  on(accountActions.createAccountSuccess, (state, action) => ({\n    ...state,\n    isLoading: false,\n    accounts: action.accounts,\n    error: null,\n  })),\n  on(accountActions.createAccountFailure, (state, action) => ({\n    ...state,\n    isLoading: false,\n    error: action.error,\n  })),\n  on(accountActions.deleteAccount, (state) => ({ ...state, isLoading: true })),\n  on(accountActions.deleteAccountSuccess, (state, action) => ({\n    ...state,\n    isLoading: false,\n    accounts: action.accounts,\n    error: null,\n  })),\n  on(accountActions.deleteAccountFailure, (state, action) => ({\n    ...state,\n    isLoading: false,\n    error: action.error,\n  })),\n  on(accountActions.getAccounts, (state) => ({ ...state, isLoading: true })),\n  on(accountActions.getAccountsSuccess, (state, action) => ({\n    ...state,\n    isLoading: false,\n    accounts: action.accounts,\n    error: null,\n  })),\n  on(accountActions.getAccountsFailure, (state, action) => ({\n    ...state,\n    isLoading: false,\n    error: action.error,\n  }))\n)"
            },
            {
                "name": "userSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectFeature,\n  (state) => state.user\n)"
            }
        ],
        "functions": [
            {
                "name": "mapToCanActivate",
                "ctype": "miscellaneous",
                "subtype": "function",
                "file": "src/app/app-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "providers",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "CanActivateFn[]",
                "jsdoctags": [
                    {
                        "name": "providers",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/store/account.actions.ts": [
                {
                    "name": "accountDeposit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[User] Account Deposit', props<{accountID: string, ammount: number, email: string}>())"
                },
                {
                    "name": "accountDepositFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('User] Account Deposit Failure', props<{error: string}>())"
                },
                {
                    "name": "accountDepositSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('User] Account Deposit Success', props<{accounts: AccountInterface[]}>())"
                },
                {
                    "name": "accountWithdraw",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[User] Account Withdraw', props<{accountID: string, ammount: number, email: string}>())"
                },
                {
                    "name": "accountWithdrawFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('User] Account Withdraw Failure', props<{error: string}>())"
                },
                {
                    "name": "accountWithdrawSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('User] Account Withdraw Success', props<{accounts: AccountInterface[]}>())"
                },
                {
                    "name": "createAccount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[User] Create Account', props<{account: AccountInterface, email: string}>())"
                },
                {
                    "name": "createAccountFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('User] Create Account Failure', props<{error: string}>())"
                },
                {
                    "name": "createAccountSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('User] Create Account Success', props<{accounts: AccountInterface[]}>())"
                },
                {
                    "name": "deleteAccount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[User] Delete Account', props<{accountID: string, email: string}>())"
                },
                {
                    "name": "deleteAccountFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('User] Delete Account Failure', props<{error: string}>())"
                },
                {
                    "name": "deleteAccountSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('User] Delete Account Success', props<{accounts: AccountInterface[]}>())"
                },
                {
                    "name": "getAccounts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[User] Get Accounts', props<{email: string}>())"
                },
                {
                    "name": "getAccountsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('User] Get Accounts Failure', props<{error: string}>())"
                },
                {
                    "name": "getAccountsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/account.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('User] Get Accounts Success', props<{accounts: AccountInterface[]}>())"
                }
            ],
            "src/app/store/selectors.ts": [
                {
                    "name": "accountsSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectFeature,\n  (state) => state.accounts\n)"
                },
                {
                    "name": "errorSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectFeature,\n  (state) => state.error\n)"
                },
                {
                    "name": "isLoadingSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectFeature,\n  (state) => state.isLoading\n)"
                },
                {
                    "name": "loggedInSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n    selectFeature,\n    (state) => state.loggedIn\n  )"
                },
                {
                    "name": "selectFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(state: any) => state.user"
                },
                {
                    "name": "userSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectFeature,\n  (state) => state.user\n)"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "Header",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Hero.stories.ts": [
                {
                    "name": "Hero",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Hero.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Hero.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args,\n})"
                }
            ],
            "src/app/store/user.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserStateInterface",
                    "defaultValue": "{\n  isLoading: false,\n  loggedIn: false,\n  user: undefined,\n  accounts: [],\n  error: null,\n}"
                },
                {
                    "name": "userReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(userActions.signIn, (state) => ({ ...state, isLoading: true })),\n  on(userActions.signInSuccess, (state, action) => ({\n    ...state,\n    isLoading: false,\n    user: action.user,\n    loggedIn: true,\n    error: null,\n  })),\n  on(userActions.signInFailure, (state, action) => ({\n    ...state,\n    isLoading: false,\n    error: action.error,\n    loggedIn: false,\n  })),\n  on(userActions.signUp, (state) => ({ ...state, isLoading: true })),\n  on(userActions.signUpSuccess, (state, action) => ({\n    ...state,\n    isLoading: false,\n    user: action.user,\n    loggedIn: true,\n    error: null,\n  })),\n  on(userActions.signUpFailure, (state, action) => ({\n    ...state,\n    isLoading: false,\n    error: action.error,\n    loggedIn: false,\n  })),\n  on(userActions.signOut, (state) => ({\n    ...state,\n    isLoading: false,\n    user: undefined,\n    accounts: undefined,\n    loggedIn: false,\n  })),\n  on(accountActions.accountDeposit, (state) => ({ ...state, isLoading: true })),\n  on(accountActions.accountDepositSuccess, (state, action) => ({\n    ...state,\n    isLoading: false,\n    accounts: action.accounts,\n    error: null,\n  })),\n  on(accountActions.accountDepositFailure, (state, action) => ({\n    ...state,\n    isLoading: false,\n    error: action.error,\n  })),\n  on(accountActions.accountWithdraw, (state) => ({\n    ...state,\n    isLoading: true,\n  })),\n  on(accountActions.accountWithdrawSuccess, (state, action) => ({\n    ...state,\n    isLoading: false,\n    accounts: action.accounts,\n    error: null,\n  })),\n  on(accountActions.accountWithdrawFailure, (state, action) => ({\n    ...state,\n    isLoading: false,\n    error: action.error,\n  })),\n  on(accountActions.createAccount, (state) => ({ ...state, isLoading: true })),\n  on(accountActions.createAccountSuccess, (state, action) => ({\n    ...state,\n    isLoading: false,\n    accounts: action.accounts,\n    error: null,\n  })),\n  on(accountActions.createAccountFailure, (state, action) => ({\n    ...state,\n    isLoading: false,\n    error: action.error,\n  })),\n  on(accountActions.deleteAccount, (state) => ({ ...state, isLoading: true })),\n  on(accountActions.deleteAccountSuccess, (state, action) => ({\n    ...state,\n    isLoading: false,\n    accounts: action.accounts,\n    error: null,\n  })),\n  on(accountActions.deleteAccountFailure, (state, action) => ({\n    ...state,\n    isLoading: false,\n    error: action.error,\n  })),\n  on(accountActions.getAccounts, (state) => ({ ...state, isLoading: true })),\n  on(accountActions.getAccountsSuccess, (state, action) => ({\n    ...state,\n    isLoading: false,\n    accounts: action.accounts,\n    error: null,\n  })),\n  on(accountActions.getAccountsFailure, (state, action) => ({\n    ...state,\n    isLoading: false,\n    error: action.error,\n  }))\n)"
                }
            ],
            "src/app/store/user.actions.ts": [
                {
                    "name": "signIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[User] Sign In', props<{email: string}>())"
                },
                {
                    "name": "signInFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[User] Sign In Failure', props<{error: string}>())"
                },
                {
                    "name": "signInSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[User] Sign In Success', props<{user: UserInterface}>())"
                },
                {
                    "name": "signOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[User] Sign Out')"
                },
                {
                    "name": "signUp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[User] Sign Up', props<{user: UserInterface}>())"
                },
                {
                    "name": "signUpFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[User] Sign Up Failure', props<{error: string}>())"
                },
                {
                    "name": "signUpSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[User] Sign Up Success', props<{user: UserInterface}>())"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/app-routing.module.ts": [
                {
                    "name": "mapToCanActivate",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "file": "src/app/app-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "providers",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "CanActivateFn[]",
                    "jsdoctags": [
                        {
                            "name": "providers",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "LandingPageComponent"
                    },
                    {
                        "path": "sign-up",
                        "component": "SignUpPageComponent"
                    },
                    {
                        "path": "sign-in",
                        "component": "SignInPageComponent"
                    },
                    {
                        "path": "withdraw",
                        "component": "WithdrawPageComponent",
                        "canActivate": "mapToCanActivate([AuthGuard])"
                    },
                    {
                        "path": "deposit",
                        "component": "DepositPageComponent",
                        "canActivate": "mapToCanActivate([AuthGuard])"
                    },
                    {
                        "path": "accounts",
                        "component": "AccountsPageComponent",
                        "canActivate": "mapToCanActivate([AuthGuard])"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app-routing.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "mapToCanActivate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/common-components/accounts/accounts-list/accounts-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountsListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/common-components/accounts/confirm-delete-dialog/confirm-delete-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmDeleteDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/common-components/accounts/create-account-dialog/create-account-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAccountDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/common-components/accounts/deposit-dialog/deposit-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DepositDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/common-components/accounts/withdraw-dialog/withdraw-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WithdrawDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/common-components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common-components/hero/hero.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeroComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common-components/sign-in-form/sign-in-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/common-components/sign-up-form/sign-up-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/accounts-page/accounts-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/deposit-page/deposit-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DepositPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/landing-page/landing-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LandingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/sign-in-page/sign-in-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/sign-up-page/sign-up-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/withdraw-page/withdraw-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WithdrawPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.guard.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/mock-apiservice.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MockAPIServiceService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/store/account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accountDeposit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accountDepositFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accountDepositSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accountWithdraw",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accountWithdrawFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accountWithdrawSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createAccount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createAccountFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createAccountSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteAccount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteAccountFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteAccountSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAccounts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAccountsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/account.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAccountsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserEffects",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accountsSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isLoadingSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loggedInSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signInFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signUp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signUpFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "signUpSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/account.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccountInterface",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/types/user.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserInterface",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/types/userState.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserStateInterface",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Header",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Hero.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Hero",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Hero.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}